// File generated by Dispatcher Wizard v  1.5.25.38 (15/04/2015)
#ifndef _TVIRTUALCOMMANDENCODE_H_
#define _TVIRTUALCOMMANDENCODE_H_

#define 		IMACRT4_TOIMARCTR4_ID 0
#define 		IMACRT3_TOIMARCTR3_ID 0
#define 		IMACRT2_TOIMARCTR2_ID 0
#define 		IMACRT1_TOIMARCTR1_ID 0
#define 		SWITCHES_SWITCHESMSG_ID 0
#define 		MULTINETQUICMANAGER_ACTIVATEPID_ID 22
#define 		MULTINETQUICMANAGER_CONFIGUREPID_ID 21
#define 		MULTINETQUICMANAGER_SETCALIBPOLAR_ID 18
#define 		MULTINETQUICMANAGER_SETFREQUENCY_ID 17
#define 		MULTINETQUICMANAGER_SETFREQSERIALLINK_ID 16
#define 		MULTINETQUICMANAGER_SETFREQACQPIXEL_ID 15
#define 		MULTINETQUICMANAGER_GETSTATUS_ID 14
#define 		MULTINETQUICMANAGER_SETASICCONF_ID 13
#define 		MULTINETQUICMANAGER_SETCYCLERAWMODE_ID 11
#define 		MULTINETQUICMANAGER_RESETNETQUIC_ID 10
#define 		MULTINETQUICMANAGER_SETACQSCIENCEMODE_ID 9
#define 		MULTINETQUICMANAGER_STOPACQ_ID 7
#define 		MULTINETQUICMANAGER_STARTACQ_ID 6
#define 		MULTINETQUICMANAGER_SETNSAMPLE_ID 5
#define 		MULTINETQUICMANAGER_SETSLOWDAC_ID 4
#define 		MULTINETQUICMANAGER_SETMASK_ID 3
#define 		MULTINETQUICMANAGER_SETOFFSETTABLE_ID 20
#define 		MULTINETQUICMANAGER_SETFEEDBACKTABLE_ID 1
#define 		MULTINETQUICMANAGER_SETDIFFDAC_ID 0
#define 		MULTINETQUICMANAGER_SETASICINIB_ID 60
#define 		MULTINETQUICMANAGER_SETASICRAZB_ID 59
#define 		MULTINETQUICMANAGER_SETASICSELLASTROW_ID 57
#define 		MULTINETQUICMANAGER_SETASICSELSTARTROW_ID 56
#define 		MULTINETQUICMANAGER_SETASICSETCOLUMN_ID 55
#define 		MULTINETQUICMANAGER_SETASICVOCM_ID 54
#define 		MULTINETQUICMANAGER_SETASICVICM_ID 53
#define 		MULTINETQUICMANAGER_SETASICSPOL_ID 52
#define 		MULTINETQUICMANAGER_SETASICAPOL_ID 51
#define 		MULTINETQUICMANAGER_SETASICPARAM_ID 50
#define 		MULTINETQUICMANAGER_CUSTOMCOMMAND_ID 40
#define 		DISP_SETLOGBOOKBASEDIRECTORY_ID 13
#define 		DISP_SETLOGBOOKFILENAME_ID 12
#define 		DISP_ADDTOLOGBOOK_ID 11
#define 		DISP_RESETDECOMMUTATIONFLAGS_ID 10
#define 		DISP_RESETSUBSYSTEM_ID 9
#define 		DISP_SETBACKUPDIR_ID 8
#define 		DISP_STOPHKBACKUP_ID 3
#define 		DISP_STARTHKBACKUP_ID 2
#define 		DISP_STOPRAWBACKUP_ID 1
#define 		DISP_STARTRAWBACKUP_ID 0
#define 		DISP_STOPBACKUP_ID 9
#define 		DISP_STARTBACKUP_ID 8
#define 		DISP_SETSCIENTIFICDATATFUSED_ID 7
#define 		DISP_SETVOUT2IINSCOEFFS_ID 6
#define 		DISP_SETVOUT2IINCOEFFS_ID 5
#define 		DISP_RESETVOUT2IINCOEFFS_ID 4
#define 		DISP_SETVOFFSETS_ID 3
#define 		DISP_SETVOFFSET_ID 2
#define 		DISP_RESETVOFFSET_ID 1


#include "customdispatcher.h"
#include <QString>
#include "qdispatchertcbytearray.h"

class TVirtualCommandEncode
{
public :
TVirtualCommandEncode();
virtual ~TVirtualCommandEncode();

virtual void buildSubsystemTcEOP(QDispatcherTCByteArray *currentTC, quint8 subsysID, quint16 commandNum) = 0;
virtual void buildSubsystemTcHeader(QDispatcherTCByteArray *currentTC, quint8 subsysID,quint16 commandNum, quint32 dataFieldSize) = 0;
virtual bool sendSubsystemTC(quint8 subsysID,quint16 tcID) = 0;
virtual bool sendCustomTC() = 0;
virtual bool sendInternTC() = 0;
virtual QDispatcherTCByteArray* startNewCustomTC(quint16 customTmNum) = 0 ;
virtual QDispatcherTCByteArray* startNewInternTC(quint16 customTmNum) = 0 ;
virtual QDispatcherTCByteArray* startNewSubsystemTC(quint8 subsysID, quint16 tcID) = 0;

/** \@brief Encodes the ResetVOffset command and sends it.
 * 
 * Builds the ResetVOffset command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendResetVOffset(quint32 asicNum);

/** \@brief Encodes the SetVOffset command and sends it.
 * 
 * Builds the SetVOffset command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] pixelNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] voffset TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetVOffset(quint32 asicNum , quint8 pixelNum , float voffset);

/** \@brief Encodes the SetVOffsets command and sends it.
 * 
 * Builds the SetVOffsets command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] voffset TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetVOffsets(quint32 asicNum , float *voffset);

/** \@brief Encodes the ResetVout2IinCoeffs command and sends it.
 * 
 * Builds the ResetVout2IinCoeffs command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendResetVout2IinCoeffs(quint32 asicNum);

/** \@brief Encodes the SetVout2IinCoeffs command and sends it.
 * 
 * Builds the SetVout2IinCoeffs command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] MinMfb TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] Rfb TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetVout2IinCoeffs(quint32 asicNum , float MinMfb , float Rfb);

/** \@brief Encodes the SetVout2IinsCoeffs command and sends it.
 * 
 * Builds the SetVout2IinsCoeffs command with the given parameters.Sends it.
 * \@param [in] MinMfb TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] Rfb TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetVout2IinsCoeffs(float *MinMfb , float *Rfb);

/** \@brief Encodes the SetScientificDataTfUsed command and sends it.
 * 
 * Builds the SetScientificDataTfUsed command with the given parameters.Sends it.
 * \@param [in] tfused TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetScientificDataTfUsed(quint8 tfused);

/** \@brief Encodes the StartBackup command and sends it.
 * 
 * Builds the StartBackup command with the given parameters.Sends it.
 * \@param [in] sessionName TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] comment TBWTBWTBWTBWTBWTBWTBW
 */
bool sendStartBackup(QString sessionName , QString comment);

/** \@brief Encodes the StopBackup command and sends it.
 * 
 * Builds the StopBackup command with the given parameters.Sends it.
 */
bool sendStopBackup();

/** \@brief Encodes the StartRawBackup command and sends it.
 * 
 * Builds the StartRawBackup command with the given parameters.Sends it.
 * \@param [in] sessionName TBWTBWTBWTBWTBWTBWTBW
 */
bool sendStartRawBackup(QString sessionName);

/** \@brief Encodes the StopRawBackup command and sends it.
 * 
 * Builds the StopRawBackup command with the given parameters.Sends it.
 */
bool sendStopRawBackup();

/** \@brief Encodes the StartHKBackup command and sends it.
 * 
 * Builds the StartHKBackup command with the given parameters.Sends it.
 * \@param [in] sessionName TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] comment TBWTBWTBWTBWTBWTBWTBW
 */
bool sendStartHKBackup(QString sessionName , QString comment);

/** \@brief Encodes the StopHKBackup command and sends it.
 * 
 * Builds the StopHKBackup command with the given parameters.Sends it.
 */
bool sendStopHKBackup();

/** \@brief Encodes the SetBackupDir command and sends it.
 * 
 * Builds the SetBackupDir command with the given parameters.Sends it.
 * \@param [in] directory TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetBackupDir(QString directory);

/** \@brief Encodes the ResetSubsystem command and sends it.
 * 
 * Builds the ResetSubsystem command with the given parameters.Sends it.
 * \@param [in] subsystemId TBWTBWTBWTBWTBWTBWTBW
 */
bool sendResetSubsystem(quint8 subsystemId);

/** \@brief Encodes the ResetDecommutationFlags command and sends it.
 * 
 * Builds the ResetDecommutationFlags command with the given parameters.Sends it.
 * \@param [in] subsytemId TBWTBWTBWTBWTBWTBWTBW
 */
bool sendResetDecommutationFlags(quint8 subsytemId);

/** \@brief Encodes the AddToLogbook command and sends it.
 * 
 * Builds the AddToLogbook command with the given parameters.Sends it.
 * \@param [in] key TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] comment TBWTBWTBWTBWTBWTBWTBW
 */
bool sendAddToLogbook(QString key , QString comment);

/** \@brief Encodes the SetLogBookFilename command and sends it.
 * 
 * Builds the SetLogBookFilename command with the given parameters.Sends it.
 * \@param [in] filename TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetLogBookFilename(QString filename);

/** \@brief Encodes the SetLogBookBaseDirectory command and sends it.
 * 
 * Builds the SetLogBookBaseDirectory command with the given parameters.Sends it.
 * \@param [in] directory TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetLogBookBaseDirectory(QString directory);

/** \@brief Encodes the CustomCommand command and sends it.
 * 
 * Builds the CustomCommand command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] id TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] cn TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] corps TBWTBWTBWTBWTBWTBWTBW
 */
bool sendCustomCommand(quint32 asicNum , quint8 id , quint8 cn , QByteArray corps);

/** \@brief Encodes the SetAsicParam command and sends it.
 * 
 * Builds the SetAsicParam command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] address TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] value TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicParam(quint32 asicNum , quint8 address , quint8 value);

/** \@brief Encodes the SetAsicApol command and sends it.
 * 
 * Builds the SetAsicApol command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] value TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicApol(quint32 asicNum , quint8 value);

/** \@brief Encodes the SetAsicSpol command and sends it.
 * 
 * Builds the SetAsicSpol command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] value TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicSpol(quint32 asicNum , quint8 value);

/** \@brief Encodes the SetAsicVicm command and sends it.
 * 
 * Builds the SetAsicVicm command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] value TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicVicm(quint32 asicNum , quint8 value);

/** \@brief Encodes the SetAsicVocm command and sends it.
 * 
 * Builds the SetAsicVocm command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] value TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicVocm(quint32 asicNum , quint8 value);

/** \@brief Encodes the SetAsicSetColumn command and sends it.
 * 
 * Builds the SetAsicSetColumn command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] startStopCol TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicSetColumn(quint32 asicNum , quint8 startStopCol);

/** \@brief Encodes the SetAsicSelStartRow command and sends it.
 * 
 * Builds the SetAsicSelStartRow command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] value TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicSelStartRow(quint32 asicNum , quint8 value);

/** \@brief Encodes the SetAsicSelLastRow command and sends it.
 * 
 * Builds the SetAsicSelLastRow command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] value TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicSelLastRow(quint32 asicNum , quint8 value);

/** \@brief Encodes the SetAsicRazb command and sends it.
 * 
 * Builds the SetAsicRazb command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicRazb(quint32 asicNum);

/** \@brief Encodes the SetAsicInib command and sends it.
 * 
 * Builds the SetAsicInib command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicInib(quint32 asicNum);

/** \@brief Encodes the SetDiffDAC command and sends it.
 * 
 * Builds the SetDiffDAC command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] diffDACValue TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetDiffDAC(quint32 asicNum , quint16 diffDACValue);

/** \@brief Encodes the SetFeedbackTable command and sends it.
 * 
 * Builds the SetFeedbackTable command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] feedbackTable TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetFeedbackTable(quint32 asicNum , quint16 *feedbackTable);

/** \@brief Encodes the SetOffsetTable command and sends it.
 * 
 * Builds the SetOffsetTable command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] offsetTable TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetOffsetTable(quint32 asicNum , quint16 *offsetTable);

/** \@brief Encodes the SetMask command and sends it.
 * 
 * Builds the SetMask command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] mask TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetMask(quint32 asicNum , quint8 *mask);

/** \@brief Encodes the SetSlowDAC command and sends it.
 * 
 * Builds the SetSlowDAC command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] slowDACValue TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetSlowDAC(quint32 asicNum , quint16 slowDACValue);

/** \@brief Encodes the SetNSample command and sends it.
 * 
 * Builds the SetNSample command with the given parameters.Sends it.
 * \@param [in] Nsample TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetNSample(quint16 Nsample);

/** \@brief Encodes the StartAcq command and sends it.
 * 
 * Builds the StartAcq command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendStartAcq(quint32 asicNum);

/** \@brief Encodes the StopAcq command and sends it.
 * 
 * Builds the StopAcq command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendStopAcq(quint32 asicNum);

/** \@brief Encodes the SetAcqScienceMode command and sends it.
 * 
 * Builds the SetAcqScienceMode command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] testMode TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAcqScienceMode(quint32 asicNum , quint16 testMode);

/** \@brief Encodes the ResetNetquic command and sends it.
 * 
 * Builds the ResetNetquic command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendResetNetquic(quint32 asicNum);

/** \@brief Encodes the SetCycleRawMode command and sends it.
 * 
 * Builds the SetCycleRawMode command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] undersampling TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetCycleRawMode(quint32 asicNum , quint16 undersampling);

/** \@brief Encodes the SetAsicConf command and sends it.
 * 
 * Builds the SetAsicConf command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] signalId TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] state TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetAsicConf(quint32 asicNum , quint8 signalId , quint8 state);

/** \@brief Encodes the GetStatus command and sends it.
 * 
 * Builds the GetStatus command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 */
bool sendGetStatus(quint32 asicNum);

/** \@brief Encodes the SetFreqAcqPixel command and sends it.
 * 
 * Builds the SetFreqAcqPixel command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] pixelAcqFreq TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetFreqAcqPixel(quint32 asicNum , quint8 pixelAcqFreq);

/** \@brief Encodes the SetFreqSerialLink command and sends it.
 * 
 * Builds the SetFreqSerialLink command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] serialFreq TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetFreqSerialLink(quint32 asicNum , quint8 serialFreq);

/** \@brief Encodes the SetFrequency command and sends it.
 * 
 * Builds the SetFrequency command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] frequencyId TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] frequency TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetFrequency(quint32 asicNum , quint8 frequencyId , quint8 frequency);

/** \@brief Encodes the SetCalibPolar command and sends it.
 * 
 * Builds the SetCalibPolar command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] mode TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] shape TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] frequency TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] amplitude TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] offset TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSetCalibPolar(quint32 asicNum , quint8 mode , quint8 shape , quint8 frequency , quint16 amplitude , quint16 offset);

/** \@brief Encodes the ConfigurePID command and sends it.
 * 
 * Builds the ConfigurePID command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] P TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] I TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] D TBWTBWTBWTBWTBWTBWTBW
 */
bool sendConfigurePID(quint32 asicNum , quint16 P , quint16 I , quint16 D);

/** \@brief Encodes the ActivatePID command and sends it.
 * 
 * Builds the ActivatePID command with the given parameters.Sends it.
 * \@param [in] asicNum TBWTBWTBWTBWTBWTBWTBW
 * \@param [in] onOff TBWTBWTBWTBWTBWTBWTBW
 */
bool sendActivatePID(quint32 asicNum , quint16 onOff);

/** \@brief Encodes the SwitchesMsg command and sends it.
 * 
 * Builds the SwitchesMsg command with the given parameters.Sends it.
 * \@param [in] txtMsg TBWTBWTBWTBWTBWTBWTBW
 */
bool sendSwitchesMsg(QString txtMsg);

/** \@brief Encodes the ToIMARCTR1 command and sends it.
 * 
 * Builds the ToIMARCTR1 command with the given parameters.Sends it.
 * \@param [in] txtMsg TBWTBWTBWTBWTBWTBWTBW
 */
bool sendToIMARCTR1(QString txtMsg);

/** \@brief Encodes the ToIMARCTR2 command and sends it.
 * 
 * Builds the ToIMARCTR2 command with the given parameters.Sends it.
 * \@param [in] txtMsg TBWTBWTBWTBWTBWTBWTBW
 */
bool sendToIMARCTR2(QString txtMsg);

/** \@brief Encodes the ToIMARCTR3 command and sends it.
 * 
 * Builds the ToIMARCTR3 command with the given parameters.Sends it.
 * \@param [in] txtMsg TBWTBWTBWTBWTBWTBWTBW
 */
bool sendToIMARCTR3(QString txtMsg);

/** \@brief Encodes the ToIMARCTR4 command and sends it.
 * 
 * Builds the ToIMARCTR4 command with the given parameters.Sends it.
 * \@param [in] txtMsg TBWTBWTBWTBWTBWTBWTBW
 */
bool sendToIMARCTR4(QString txtMsg);

};

#endif
